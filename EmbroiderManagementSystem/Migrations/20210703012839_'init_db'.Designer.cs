// <auto-generated />
using System;
using EmbroideryData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmbroiderManagementSystem.Migrations
{
    [DbContext(typeof(EmbroideryContext))]
    [Migration("20210703012839_'init_db'")]
    partial class init_db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoiceDetail_SubCategory", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailId", "SubCategoryId");

                    b.HasIndex("InvoiceDetailId")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("EmbroiderInvoiceDetail_SubCategory");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoice_Category", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("EmbroiderInvoice_Category");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoice_Embroider", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("EmbroiderId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "EmbroiderId");

                    b.HasIndex("EmbroiderId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("EmbroiderInvoice_Embroider");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoice_ProductWeight", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWeightId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "ProductWeightId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("ProductWeightId");

                    b.ToTable("EmbroiderInvoice_ProductWeight");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrderDetail_SubCategory", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId", "SubCategoryId");

                    b.HasIndex("OrderDetailId")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("EmbroiderOrderDetail_SubCategory");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_Category", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("EmbroiderOrder_Category");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_Embroider", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("EmbroiderId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "EmbroiderId");

                    b.HasIndex("EmbroiderId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("EmbroiderOrder_Embroider");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_EmbroiderInvoice", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "InvoiceId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("EmbroiderOrder_EmbroiderInvoice");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_ProductWeight", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWeightId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductWeightId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductWeightId");

                    b.ToTable("EmbroiderOrder_ProductWeight");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderServiceItemHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("Date");

                    b.Property<int>("ProductWeightId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EmbroiderServiceItemHistory");
                });

            modelBuilder.Entity("EmbroideryData.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("EmbroideryData.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EmbroideryData.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCode")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EmbroideryData.CategoryView", b =>
                {
                    b.Property<string>("CategoryCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryCode");

                    b.Property<string>("GroupCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupCode");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupId");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupName");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.ToView("CategoryView");
                });

            modelBuilder.Entity("EmbroideryData.Embroider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmbroiderCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmbroiderCode")
                        .IsUnique()
                        .HasFilter("[EmbroiderCode] IS NOT NULL");

                    b.ToTable("Embroider");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiposalGold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ExcessOrLack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GoldGradeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBalance")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("Date");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidToEmbroider")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedGold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceFeePerItem")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNo")
                        .IsUnique();

                    b.ToTable("EmbroiderInvoice");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DetailType")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("EmbroiderInvoiceDetail");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GoldGradeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("Date");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidGold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidJewel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("EmbroiderOrder");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("EmbroiderOrderDetail");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderOrderView", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryName");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OrderNo");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatus");

                    b.Property<int>("OrderType")
                        .HasColumnType("int")
                        .HasColumnName("OrderType");

                    b.Property<string>("ProductWeightName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductWeightName");

                    b.ToView("EmbroiderOrderView");
                });

            modelBuilder.Entity("EmbroideryData.GroupView", b =>
                {
                    b.Property<int>("CategoryCount")
                        .HasColumnType("int")
                        .HasColumnName("CategoryCount");

                    b.Property<string>("GroupCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupCode");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.ToView("GroupView");
                });

            modelBuilder.Entity("EmbroideryData.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GroupCode")
                        .IsUnique();

                    b.ToTable("ProductGroup");
                });

            modelBuilder.Entity("EmbroideryData.ProductWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Gram")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LocalizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductWeight");
                });

            modelBuilder.Entity("EmbroideryData.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SubCategoryCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryCode")
                        .IsUnique();

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("EmbroideryData.SubCategoryView", b =>
                {
                    b.Property<string>("CategoryCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryCode");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryName");

                    b.Property<string>("GroupCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupCode");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupId");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupName");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("SubCategoryCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubCategoryCode");

                    b.ToView("SubCategoryView");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoiceDetail_SubCategory", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderInvoiceDetail", "EmbroiderInvoiceDetail")
                        .WithOne("EmbroiderInvoiceDetail_SubCategory")
                        .HasForeignKey("EmbroiderData.EmbroiderInvoiceDetail_SubCategory", "InvoiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.SubCategory", "SubCategory")
                        .WithMany("EmbroiderInvoiceDetail_SubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbroiderInvoiceDetail");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoice_Category", b =>
                {
                    b.HasOne("EmbroideryData.Category", "Category")
                        .WithMany("EmbroiderInvoice_Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.EmbroiderInvoice", "EmbroiderInvoice")
                        .WithOne("EmbroiderInvoice_Category")
                        .HasForeignKey("EmbroiderData.EmbroiderInvoice_Category", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("EmbroiderInvoice");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoice_Embroider", b =>
                {
                    b.HasOne("EmbroideryData.Embroider", "Embroider")
                        .WithMany("EmbroiderInvoice_Embroideries")
                        .HasForeignKey("EmbroiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.EmbroiderInvoice", "EmbroiderInvoice")
                        .WithOne("EmbroiderInvoice_Embroider")
                        .HasForeignKey("EmbroiderData.EmbroiderInvoice_Embroider", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Embroider");

                    b.Navigation("EmbroiderInvoice");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderInvoice_ProductWeight", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderInvoice", "EmbroiderInvoice")
                        .WithOne("EmbroiderInvoice_ProductWeight")
                        .HasForeignKey("EmbroiderData.EmbroiderInvoice_ProductWeight", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.ProductWeight", "ProductWeight")
                        .WithMany("EmbroiderInvoice_ProductWeights")
                        .HasForeignKey("ProductWeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbroiderInvoice");

                    b.Navigation("ProductWeight");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrderDetail_SubCategory", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderOrderDetail", "EmbroiderOrderDetail")
                        .WithOne("EmbroiderOrderDetail_SubCategory")
                        .HasForeignKey("EmbroiderData.EmbroiderOrderDetail_SubCategory", "OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.SubCategory", "SubCategory")
                        .WithMany("EmbroiderOrderDetail_SubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbroiderOrderDetail");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_Category", b =>
                {
                    b.HasOne("EmbroideryData.Category", "Category")
                        .WithMany("EmbroiderOrder_Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.EmbroiderOrder", "EmbroiderOrder")
                        .WithOne("EmbroiderOrder_Category")
                        .HasForeignKey("EmbroiderData.EmbroiderOrder_Category", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("EmbroiderOrder");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_Embroider", b =>
                {
                    b.HasOne("EmbroideryData.Embroider", "Embroider")
                        .WithMany("EmbroiderOrder_Embroideries")
                        .HasForeignKey("EmbroiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.EmbroiderOrder", "EmbroiderOrder")
                        .WithOne("EmbroiderOrder_Embroider")
                        .HasForeignKey("EmbroiderData.EmbroiderOrder_Embroider", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Embroider");

                    b.Navigation("EmbroiderOrder");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_EmbroiderInvoice", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderInvoice", "EmbroiderInvoice")
                        .WithOne("EmbroiderOrder_EmbroiderInvoice")
                        .HasForeignKey("EmbroiderData.EmbroiderOrder_EmbroiderInvoice", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.EmbroiderOrder", "EmbroiderOrder")
                        .WithOne("EmbroiderOrder_EmbroiderInvoice")
                        .HasForeignKey("EmbroiderData.EmbroiderOrder_EmbroiderInvoice", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbroiderInvoice");

                    b.Navigation("EmbroiderOrder");
                });

            modelBuilder.Entity("EmbroiderData.EmbroiderOrder_ProductWeight", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderOrder", "EmbroiderOrder")
                        .WithOne("EmbroiderOrder_ProductWeight")
                        .HasForeignKey("EmbroiderData.EmbroiderOrder_ProductWeight", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.ProductWeight", "ProductWeight")
                        .WithMany("EmbroiderOrder_ProductWeights")
                        .HasForeignKey("ProductWeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbroiderOrder");

                    b.Navigation("ProductWeight");
                });

            modelBuilder.Entity("EmbroideryData.Category", b =>
                {
                    b.HasOne("EmbroideryData.ProductGroup", "Group")
                        .WithMany("Categories")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderInvoiceDetail", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderInvoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderOrderDetail", b =>
                {
                    b.HasOne("EmbroideryData.EmbroiderOrder", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EmbroideryData.SubCategory", b =>
                {
                    b.HasOne("EmbroideryData.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EmbroideryData.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmbroideryData.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmbroideryData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EmbroideryData.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmbroideryData.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmbroideryData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmbroideryData.ApplicationRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EmbroideryData.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("EmbroideryData.Category", b =>
                {
                    b.Navigation("EmbroiderInvoice_Categories");

                    b.Navigation("EmbroiderOrder_Categories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EmbroideryData.Embroider", b =>
                {
                    b.Navigation("EmbroiderInvoice_Embroideries");

                    b.Navigation("EmbroiderOrder_Embroideries");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderInvoice", b =>
                {
                    b.Navigation("EmbroiderInvoice_Category");

                    b.Navigation("EmbroiderInvoice_Embroider");

                    b.Navigation("EmbroiderInvoice_ProductWeight");

                    b.Navigation("EmbroiderOrder_EmbroiderInvoice");

                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderInvoiceDetail", b =>
                {
                    b.Navigation("EmbroiderInvoiceDetail_SubCategory");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderOrder", b =>
                {
                    b.Navigation("EmbroiderOrder_Category");

                    b.Navigation("EmbroiderOrder_Embroider");

                    b.Navigation("EmbroiderOrder_EmbroiderInvoice");

                    b.Navigation("EmbroiderOrder_ProductWeight");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EmbroideryData.EmbroiderOrderDetail", b =>
                {
                    b.Navigation("EmbroiderOrderDetail_SubCategory");
                });

            modelBuilder.Entity("EmbroideryData.ProductGroup", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("EmbroideryData.ProductWeight", b =>
                {
                    b.Navigation("EmbroiderInvoice_ProductWeights");

                    b.Navigation("EmbroiderOrder_ProductWeights");
                });

            modelBuilder.Entity("EmbroideryData.SubCategory", b =>
                {
                    b.Navigation("EmbroiderInvoiceDetail_SubCategories");

                    b.Navigation("EmbroiderOrderDetail_SubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
